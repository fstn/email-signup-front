[{"/Users/stephenzambaux/gitlab/react-library/src/index.tsx":"1","/Users/stephenzambaux/gitlab/react-library/src/reportWebVitals.ts":"2","/Users/stephenzambaux/gitlab/react-library/src/App.tsx":"3","/Users/stephenzambaux/gitlab/react-library/src/components/image-on-side/index.tsx":"4","/Users/stephenzambaux/gitlab/react-library/src/hooks/translation/index.ts":"5","/Users/stephenzambaux/gitlab/react-library/src/locale/index.tsx":"6","/Users/stephenzambaux/gitlab/react-library/src/components/form-layout/index.tsx":"7","/Users/stephenzambaux/gitlab/react-library/src/axios/index.tsx":"8","/Users/stephenzambaux/gitlab/react-library/src/user-context/index.tsx":"9","/Users/stephenzambaux/gitlab/react-library/src/hooks/user/index.tsx":"10","/Users/stephenzambaux/gitlab/react-library/src/pages/register-code/index.tsx":"11","/Users/stephenzambaux/gitlab/react-library/src/images/welcome-image/index.tsx":"12","/Users/stephenzambaux/gitlab/react-library/src/forms/register-code-form/index.tsx":"13","/Users/stephenzambaux/gitlab/react-library/src/images/security-image/index.tsx":"14","/Users/stephenzambaux/gitlab/react-library/src/pages/login-page/index.tsx":"15","/Users/stephenzambaux/gitlab/react-library/src/pages/register-email-page/index.tsx":"16","/Users/stephenzambaux/gitlab/react-library/src/pages/register-page/index.tsx":"17","/Users/stephenzambaux/gitlab/react-library/src/images/email-image/index.tsx":"18","/Users/stephenzambaux/gitlab/react-library/src/forms/login-form/index.tsx":"19","/Users/stephenzambaux/gitlab/react-library/src/forms/register-email-form/index.tsx":"20","/Users/stephenzambaux/gitlab/react-library/src/images/login-image/index.tsx":"21","/Users/stephenzambaux/gitlab/react-library/src/forms/register-form/index.tsx":"22","/Users/stephenzambaux/gitlab/react-library/src/pages/forgot-password-page/index.tsx":"23","/Users/stephenzambaux/gitlab/react-library/src/forms/forgot-password-form/index.tsx":"24"},{"size":500,"mtime":1612122260301,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":1612122260302,"results":"27","hashOfConfig":"26"},{"size":1107,"mtime":1612180462579,"results":"28","hashOfConfig":"26"},{"size":1083,"mtime":1612134557226,"results":"29","hashOfConfig":"26"},{"size":347,"mtime":1612143808283,"results":"30","hashOfConfig":"26"},{"size":1789,"mtime":1612143774358,"results":"31","hashOfConfig":"26"},{"size":442,"mtime":1612134334543,"results":"32","hashOfConfig":"26"},{"size":3022,"mtime":1612178065372,"results":"33","hashOfConfig":"26"},{"size":755,"mtime":1612148479548,"results":"34","hashOfConfig":"26"},{"size":2540,"mtime":1612178065352,"results":"35","hashOfConfig":"26"},{"size":725,"mtime":1612180018185,"results":"36","hashOfConfig":"26"},{"size":14014,"mtime":1612178292725,"results":"37","hashOfConfig":"26"},{"size":2837,"mtime":1612178065361,"results":"38","hashOfConfig":"26"},{"size":13077,"mtime":1612179486952,"results":"39","hashOfConfig":"26"},{"size":610,"mtime":1612178509267,"results":"40","hashOfConfig":"26"},{"size":723,"mtime":1612180124147,"results":"41","hashOfConfig":"26"},{"size":637,"mtime":1612179165989,"results":"42","hashOfConfig":"26"},{"size":11590,"mtime":1612178870571,"results":"43","hashOfConfig":"26"},{"size":3866,"mtime":1612179797663,"results":"44","hashOfConfig":"26"},{"size":2722,"mtime":1612179144813,"results":"45","hashOfConfig":"26"},{"size":8839,"mtime":1612178292718,"results":"46","hashOfConfig":"26"},{"size":4721,"mtime":1612178292708,"results":"47","hashOfConfig":"26"},{"size":661,"mtime":1612180573324,"results":"48","hashOfConfig":"26"},{"size":396,"mtime":1612180505003,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"chqkr1",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/stephenzambaux/gitlab/react-library/src/index.tsx",[],["105","106"],"/Users/stephenzambaux/gitlab/react-library/src/reportWebVitals.ts",[],"/Users/stephenzambaux/gitlab/react-library/src/App.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/components/image-on-side/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/hooks/translation/index.ts",["107"],"import {Namespace, useTranslation, UseTranslationOptions} from \"react-i18next\";\n// noinspection ES6UnusedImports\nimport i18next from 'i18next';\n\n\nexport const Translate = (\n  ns?: Namespace,\n  options?: UseTranslationOptions,\n): { t: (key: string) => string } => {\n  const {t} = useTranslation(ns, options);\n  return {t: (key) => t(key) || \"\"}\n}\n\n","/Users/stephenzambaux/gitlab/react-library/src/locale/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/components/form-layout/index.tsx",[],["108","109"],"/Users/stephenzambaux/gitlab/react-library/src/axios/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/user-context/index.tsx",["110"],"import React, {useEffect} from \"react\";\nimport {useImmer} from \"use-immer\";\nimport {useUser} from \"../hooks/user\";\nimport {UserContextType, UserContextTypeContent} from \"../interfaces\";\n\nexport const UserContext = React.createContext({} as UserContextType);\nexport const UserContextProvider = (props: { children: any }) => {\n\n    const [userCtx, updateUserCtx] = useImmer<UserContextTypeContent>({})\n\n\n    const {loadMe} = useUser({userCtx:userCtx, updateUserCtx} as { userCtx?: UserContextTypeContent, updateUserCtx?: any })\n\n    useEffect(()=>{loadMe().then()},[])\n\n    return (\n        <UserContext.Provider value={{userCtx: userCtx, updateUserCtx}}>\n            {props?.children}\n        </UserContext.Provider>\n    );\n\n};\n\nexport default UserContext\n","/Users/stephenzambaux/gitlab/react-library/src/hooks/user/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/pages/register-code/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/images/welcome-image/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/forms/register-code-form/index.tsx",["111","112","113","114","115","116"],"import {UserOutlined, PhoneOutlined, MailOutlined, SafetyCertificateOutlined} from \"@ant-design/icons\";\nimport {Button, Card, Form, Input, Select} from \"antd\";\n// @ts-ignore\nimport {navigate} from \"hookrouter\";\nimport React, {useContext} from \"react\"\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport styled from \"styled-components\";\nimport {useImmer} from \"use-immer\";\nimport {FormStyle, layout, tailLayout} from \"../../components/form-layout\";\nimport {LocaleLabel, LocaleTitle} from \"../../locale\";\nimport { AxiosContextType, AxiosContext} from \"../../axios\";\nimport {Translate} from \"../../hooks/translation\";\n\nconst Style = styled(Card).attrs({bordered: false})`\n\nh1{\ntext-align: left;\nwidth: 100%;\nmargin-bottom: 1em;\nfont-weight: bold;\n}\n`\n\nexport function RegisterCodeForm(props: {\n    code?: string,\n    email?: string\n} = {}) {\n    const {axios} = useContext<AxiosContextType>(AxiosContext)\n    const {t} = Translate()\n    const [state, updateState] = useImmer({captcha: false, loading: false})\n    const onFinish = async (values: any) => {\n        try {\n            updateState(draft => {\n                draft.loading = true\n            })\n            await axios!.post(`/register`, values)\n            navigate('/login-form-page');\n        } catch (e) {\n            throw e\n        } finally {\n            updateState(draft => {\n                draft.loading = false\n            })\n        }\n    };\n\n    return <FormStyle>\n        <Style>\n            <h1><LocaleTitle tkey={\"validate.code\"}/></h1>\n            <Form onFinish={onFinish} {...layout}>\n                <Form.Item  name={\"email\"} label={<LocaleLabel tkey={\"email\"}/>} required={true}>\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>}/>\n                </Form.Item>\n                <Form.Item name={\"code\"} label={<LocaleLabel tkey={\"code\"}/>} required={true}>\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>}/>\n                </Form.Item>\n                <Form.Item labelCol={{span: 0}} wrapperCol={{span: 24}}>\n                    <div style={{width: \"fit-content\", marginRight: 0, marginLeft: \"auto\"}}>\n                        <ReCAPTCHA\n                            size={\"normal\"}\n                            sitekey=\"6LdxSx0aAAAAAITN1byVT-_x8ihn8spFZT9tbgyF\"\n                            onChange={() => updateState(draft => {\n                                draft.captcha = true\n                            })}\n                        />\n                    </div>\n                </Form.Item>\n                <Form.Item {...tailLayout} className={\"right\"}>\n                    <Button type={\"primary\"} htmlType={\"submit\"}><LocaleLabel tkey={\"register\"}/></Button>\n                </Form.Item>\n            </Form>\n        </Style>\n    </FormStyle>\n}\n\nexport default RegisterCodeForm\n","/Users/stephenzambaux/gitlab/react-library/src/images/security-image/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/pages/login-page/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/pages/register-email-page/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/pages/register-page/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/images/email-image/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/forms/login-form/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/forms/register-email-form/index.tsx",["117","118","119","120","121","122"],"import {UserOutlined, PhoneOutlined, MailOutlined, SafetyCertificateOutlined} from \"@ant-design/icons\";\nimport {Button, Card, Form, Input, Select} from \"antd\";\n// @ts-ignore\nimport {navigate} from \"hookrouter\";\nimport React, {useContext} from \"react\"\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport styled from \"styled-components\";\nimport {useImmer} from \"use-immer\";\nimport {FormStyle, layout, tailLayout} from \"../../components/form-layout\";\nimport {LocaleLabel, LocaleTitle} from \"../../locale\";\nimport { AxiosContextType, AxiosContext} from \"../../axios\";\nimport {Translate} from \"../../hooks/translation\";\n\nconst Style = styled(Card).attrs({bordered: false})`\n\nh1{\ntext-align: left;\nwidth: 100%;\nmargin-bottom: 1em;\nfont-weight: bold;\n}\n`\n\n\nexport function RegisterEmailForm(props: {\n    code?: string,\n    email?: string,\n} = {}) {\n    const {axios} = useContext<AxiosContextType>(AxiosContext)\n    const {t} = Translate()\n    const [state, updateState] = useImmer({captcha: false, loading: false})\n    const onFinish = async (values: any) => {\n        try {\n            updateState(draft => {\n                draft.loading = true\n            })\n            await axios!.post(`/register`, values)\n            navigate('/login-form-page');\n        } catch (e) {\n            throw e\n        } finally {\n            updateState(draft => {\n                draft.loading = false\n            })\n        }\n    };\n\n    return <FormStyle>\n        <Style>\n            <h1><LocaleTitle tkey={\"register-form-page.email\"}/></h1>\n            <Form onFinish={onFinish} {...layout}>\n                <Form.Item name={\"email\"} label={<LocaleLabel tkey={\"email\"}/>} initialValue={props.email}\n                           required={true} rules={[{type: \"string\"}]}>\n                    <Input prefix={<MailOutlined className=\"site-form-item-icon\"/>}/>\n                </Form.Item>\n                <Form.Item labelCol={{span: 0}} wrapperCol={{span: 24}}>\n                    <div style={{width: \"fit-content\", marginRight: 0, marginLeft: \"auto\"}}>\n                        <ReCAPTCHA\n                            size={\"normal\"}\n                            sitekey=\"6LdxSx0aAAAAAITN1byVT-_x8ihn8spFZT9tbgyF\"\n                            onChange={() => updateState(draft => {\n                                draft.captcha = true\n                            })}\n                        />\n                    </div>\n                </Form.Item>\n                <Form.Item {...tailLayout} className={\"right\"}>\n                    <Button type={\"primary\"} htmlType={\"submit\"}><LocaleLabel tkey={\"register\"}/></Button>\n                </Form.Item>\n            </Form>\n        </Style>\n    </FormStyle>\n}\n\nexport default RegisterEmailForm\n","/Users/stephenzambaux/gitlab/react-library/src/images/login-image/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/forms/register-form/index.tsx",["123"],"import {UserOutlined, PhoneOutlined, MailOutlined, SafetyCertificateOutlined} from \"@ant-design/icons\";\nimport {Button, Card, Form, Input, Select} from \"antd\";\n// @ts-ignore\nimport {navigate} from \"hookrouter\";\nimport React, {useContext} from \"react\"\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport styled from \"styled-components\";\nimport {useImmer} from \"use-immer\";\nimport {FormStyle, layout, tailLayout} from \"../../components/form-layout\";\nimport {LocaleLabel, LocaleTitle} from \"../../locale\";\nimport { AxiosContextType, AxiosContext} from \"../../axios\";\nimport {Translate} from \"../../hooks/translation\";\n\nexport type Field = \"gender\" | \"firstName\" | \"lastName\" | \"phone\";\nconst Style = styled(Card).attrs({bordered: false})`\n\nh1{\ntext-align: left;\nwidth: 100%;\nmargin-bottom: 1em;\nfont-weight: bold;\n}\n`\n\nexport function RegisterForm(props: {\n    code?: string,\n    email?: string,\n    hiddenFields?: Field[]\n} = {hiddenFields: []}) {\n    const {axios} = useContext<AxiosContextType>(AxiosContext)\n    const {t} = Translate()\n    const [state, updateState] = useImmer({captcha: false, loading: false})\n    const onFinish = async (values: any) => {\n        try {\n            updateState(draft => {\n                draft.loading = true\n            })\n            await axios!.post(`/register`, values)\n            navigate('/login-form-page');\n        } catch (e) {\n            throw e\n        } finally {\n            updateState(draft => {\n                draft.loading = false\n            })\n        }\n    };\n\n    function isVisible(fieldName: Field) {\n        return !props.hiddenFields?.some(d => d === fieldName)\n    }\n\n    return <FormStyle>\n        <Style>\n            <h1><LocaleTitle tkey={\"signup\"}/></h1>\n            <Form onFinish={onFinish} {...layout}>\n                {isVisible(\"gender\") &&\n                <Form.Item name={\"gender\"} label={<LocaleLabel tkey={\"gender\"}/>} required={true}>\n                    <Select options={[\n                        {value: \"m\", label: t(\"gender.male\")},\n                        {value: \"f\", label: t(\"gender.female\")},\n                        {value: \"o\", label: t(\"gender.other\")}]}/>\n                </Form.Item>}\n                {isVisible(\"firstName\") &&\n                <Form.Item  name={\"firstName\"} label={<LocaleLabel tkey={\"firstName\"}/>} required={true}>\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>}/>\n                </Form.Item>}\n                {isVisible(\"lastName\") &&\n                <Form.Item name={\"lastName\"} label={<LocaleLabel tkey={\"lastName\"}/>} required={true}>\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>}/>\n                </Form.Item>}\n                {isVisible(\"phone\") && <Form.Item name={\"phone\"} label={<LocaleLabel tkey={\"phone\"}/>} required={true}\n                                                  rules={[{type: \"string\"}]}>\n                    <Input prefix={<PhoneOutlined className=\"site-form-item-icon\"/>} />\n                </Form.Item>}\n                <Form.Item name={\"code\"} label={<LocaleLabel tkey={\"code\"}/>} initialValue={props.code} required={true}>\n                    <Input prefix={<SafetyCertificateOutlined className=\"site-form-item-icon\"/>} type={\"number\"}/>\n                </Form.Item>\n                <Form.Item name={\"email\"} label={<LocaleLabel tkey={\"email\"}/>} initialValue={props.email}\n                           required={true} rules={[{type: \"string\"}]}>\n                    <Input prefix={<MailOutlined className=\"site-form-item-icon\"/>}/>\n                </Form.Item>\n                <Form.Item name={\"password\"} label={<LocaleLabel tkey={\"password\"}/>} required={true}\n                           rules={[{min: 10, required: true}]}>\n                    <Input prefix={<SafetyCertificateOutlined className=\"site-form-item-icon\"/>}/>\n                </Form.Item>\n\n                <Form.Item labelCol={{span: 0}} wrapperCol={{span: 24}}>\n                    <div style={{width: \"fit-content\", marginRight: 0, marginLeft: \"auto\"}}>\n                        <ReCAPTCHA\n                            size={\"normal\"}\n                            sitekey=\"6LdxSx0aAAAAAITN1byVT-_x8ihn8spFZT9tbgyF\"\n                            onChange={() => updateState(draft => {\n                                draft.captcha = true\n                            })}\n                        />\n                    </div>\n                </Form.Item>\n                <Form.Item {...tailLayout} className={\"right\"}>\n                    <Button type={\"primary\"} htmlType={\"submit\"}><LocaleLabel tkey={\"register\"}/></Button>\n                </Form.Item>\n            </Form>\n        </Style>\n    </FormStyle>\n}\n\nexport default  RegisterForm\n","/Users/stephenzambaux/gitlab/react-library/src/pages/forgot-password-page/index.tsx",[],"/Users/stephenzambaux/gitlab/react-library/src/forms/forgot-password-form/index.tsx",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":15},{"ruleId":"124","replacedBy":"132"},{"ruleId":"126","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":14,"column":37,"nodeType":"136","endLine":14,"endColumn":39,"suggestions":"137"},{"ruleId":"128","severity":1,"message":"138","line":1,"column":23,"nodeType":"130","messageId":"131","endLine":1,"endColumn":36},{"ruleId":"128","severity":1,"message":"139","line":1,"column":38,"nodeType":"130","messageId":"131","endLine":1,"endColumn":50},{"ruleId":"128","severity":1,"message":"140","line":1,"column":52,"nodeType":"130","messageId":"131","endLine":1,"endColumn":77},{"ruleId":"128","severity":1,"message":"141","line":2,"column":36,"nodeType":"130","messageId":"131","endLine":2,"endColumn":42},{"ruleId":"128","severity":1,"message":"142","line":29,"column":12,"nodeType":"130","messageId":"131","endLine":29,"endColumn":13},{"ruleId":"128","severity":1,"message":"143","line":30,"column":12,"nodeType":"130","messageId":"131","endLine":30,"endColumn":17},{"ruleId":"128","severity":1,"message":"144","line":1,"column":9,"nodeType":"130","messageId":"131","endLine":1,"endColumn":21},{"ruleId":"128","severity":1,"message":"138","line":1,"column":23,"nodeType":"130","messageId":"131","endLine":1,"endColumn":36},{"ruleId":"128","severity":1,"message":"140","line":1,"column":52,"nodeType":"130","messageId":"131","endLine":1,"endColumn":77},{"ruleId":"128","severity":1,"message":"141","line":2,"column":36,"nodeType":"130","messageId":"131","endLine":2,"endColumn":42},{"ruleId":"128","severity":1,"message":"142","line":30,"column":12,"nodeType":"130","messageId":"131","endLine":30,"endColumn":13},{"ruleId":"128","severity":1,"message":"143","line":31,"column":12,"nodeType":"130","messageId":"131","endLine":31,"endColumn":17},{"ruleId":"128","severity":1,"message":"143","line":32,"column":12,"nodeType":"130","messageId":"131","endLine":32,"endColumn":17},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"@typescript-eslint/no-unused-vars","'i18next' is defined but never used.","Identifier","unusedVar",["145"],["146"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadMe'. Either include it or remove the dependency array.","ArrayExpression",["147"],"'PhoneOutlined' is defined but never used.","'MailOutlined' is defined but never used.","'SafetyCertificateOutlined' is defined but never used.","'Select' is defined but never used.","'t' is assigned a value but never used.","'state' is assigned a value but never used.","'UserOutlined' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},"Update the dependencies array to be: [loadMe]",{"range":"150","text":"151"},[563,565],"[loadMe]"]